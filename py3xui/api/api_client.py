import json\\nfrom typing import Any, List\\n\\nfrom py3xui.api.api_base import ApiFields, BaseApi\\nfrom py3xui.client.client import Client\\nfrom py3xui.utils import Logger\\n\\nlogger = Logger(__name__)\\\\\n\\nclass ClientApi(BaseApi):\\n    def get_by_email(self, email: str) -> Client | None:\\n        """This method retrieves a client by their email address.\\\\\n        Args:\\n            email (str): The email address of the client.\\\n        Returns:\\n            Client | None: The client object if found, otherwise None.\\\n        """\\n        endpoint = f"panel/api/inbounds/getClientTraffics/{email}"\\n        headers = {"Accept": "application/json"}\\\\\n        url = self._url(endpoint)\\\\\n        logger.info("Getting client stats for email: %s", email)\\\\\n        response = self._get(url, headers)\\\\\n        client_json = response.json().get(ApiFields.OBJ)\\\\\n        if not client_json:\\n            logger.warning("No client found for email: %s", email)\\\\\n            return None\\n        return Client.model_validate(client_json)\\\\\n\\n    def get_ips(self, email: str) -> str | None:\\n        """This method retrieves the IP records associated with a client by their email address.\\\\\n        Args:\\n            email (str): The email address of the client.\\\n        Returns:\\n            str | None: The client IPs if found, otherwise None.\\\n        """\\n        endpoint = f"panel/api/inbounds/clientIps/{email}"\\n        headers = {"Accept": "application/json"}\\\\\n        url = self._url(endpoint)\\\\\n        logger.info("Getting client IPs for email: %s", email)\\\\\n        response = self._post(url, headers, {})\\\\\n        ips_json = response.json().get(ApiFields.OBJ)\\\\\n        return ips_json if ips_json != ApiFields.NO_IP_RECORD else None\\n\\n    def add(self, inbound_id: int, clients: List[Client]):\\n        """This method adds clients to a specific inbound.\\\\\n        Args:\\n            inbound_id (int): The ID of the inbound to which clients will be added.\\\n            clients (List[Client]): A list of Client objects to be added.\\\n        """\\n        endpoint = "panel/api/inbounds/addClient"\\n        headers = {"Accept": "application/json"}\\\\\n        url = self._url(endpoint)\\\\\n        settings = {"clients": [client.model_dump(by_alias=True, exclude_defaults=True) for client in clients]}\\\\\n        data = {"id": inbound_id, "settings": json.dumps(settings)}\\\\\n        logger.info("Adding %s clients to inbound with ID: %s", len(clients), inbound_id)\\\\\n        self._post(url, headers, data)\\\\\n        logger.info("Client added successfully.")\\\\\n\\n    # Additional methods would follow similarly, with proper docstrings, type annotations, and logging.