import json\"from typing import Any\"\\\nfrom py3xui.api.api_base import ApiFields, BaseApi\"\\\nfrom py3xui.client.client import Client\"\\\nfrom py3xui.utils import Logger\"\\\n\\\nlogger = Logger(__name__)\"\\\n\\\nclass ClientApi(BaseApi):\"\\\n    def get_by_email(self, email: str) -> Client | None:\"\\\n        """Retrieve client by email."""\"\\\n        endpoint = f"panel/api/inbounds/getClientTraffics/{email}"\"\\\n        headers = {\"Accept\": \"application/json\"} \"\\\n        url = self._url(endpoint) \"\\\n        logger.info(\"Getting client stats for email: %s\", email) \"\\\n        response = self._get(url, headers) \"\\\n        client_json = response.json().get(ApiFields.OBJ) \"\\\n        if not client_json: \"\\\n            logger.warning(\"No client found for email: %s\", email) \"\\\n            return None \"\\\n        return Client.model_validate(client_json) \"\\\n\\\n    def get_ips(self, email: str) -> str | None:\"\\\n        """Retrieve client IPs by email."""\"\\\n        endpoint = f"panel/api/inbounds/clientIps/{email}"\"\\\n        headers = {\"Accept\": \"application/json\"} \"\\\n        url = self._url(endpoint) \"\\\n        logger.info(\"Getting client IPs for email: %s\", email) \"\\\n        response = self._post(url, headers, {}) \"\\\n        ips_json = response.json().get(ApiFields.OBJ) \"\\\n        return ips_json if ips_json != ApiFields.NO_IP_RECORD else None \"\\\n\\\n    def add(self, inbound_id: int, clients: list[Client]):\"\\\n        """Add clients to an inbound."""\"\\\n        endpoint = "panel/api/inbounds/addClient"\"\\\n        headers = {\"Accept\": \"application/json\"} \"\\\n        url = self._url(endpoint) \"\\\n        settings = [{\"client\": client.model_dump(by_alias=True, exclude_defaults=True)} for client in clients] \"\\\n        data = {\"id\": inbound_id, \"settings\": json.dumps(settings)} \"\\\n        logger.info(\"Adding %s clients to inbound with ID: %s\", len(clients), inbound_id) \"\\\n        self._post(url, headers, data) \"\\\n        logger.info(\"Client added successfully.") \"\\\n\\\n    def update(self, client_uuid: str, client: Client) -> None:\"\\\n        """Update a client."""\"\\\n        endpoint = f"panel/api/inbounds/updateClient/{client_uuid}"\"\\\n        headers = {\"Accept\": \"application/json\"} \"\\\n        url = self._url(endpoint) \"\\\n        settings = {\"client\": client.model_dump(by_alias=True, exclude_defaults=True)} \"\\\n        data = {\"id\": client.inbound_id, \"settings\": json.dumps(settings)} \"\\\n        logger.info(\"Updating client: %s\", client) \"\\\n        self._post(url, headers, data) \"\\\n        logger.info(\"Client updated successfully.") \"\\\n\\\n    def reset_ips(self, email: str) -> None:\"\\\n        """Reset client IPs by email."""\"\\\n        endpoint = f"panel/api/inbounds/clearClientIps/{email}"\"\\\n        headers = {\"Accept\": \"application/json\"} \"\\\n        url = self._url(endpoint) \"\\\n        data: dict[str, Any] = {} \"\\\n        logger.info(\"Resetting client IPs for email: %s\", email) \"\\\n        self._post(url, headers, data) \"\\\n        logger.info(\"Client IPs reset successfully.") \"\\\n\\\n    def reset_stats(self, inbound_id: int, email: str) -> None:\"\\\n        """Reset client stats for inbound ID and email."""\"\\\n        endpoint = f"panel/api/inbounds/{inbound_id}/resetClientTraffic/{email}"\"\\\n        headers = {\"Accept\": \"application/json\"} \"\\\n        url = self._url(endpoint) \"\\\n        data: dict[str, Any] = {} \"\\\n        logger.info(\"Resetting client stats for inbound ID: %s, email: %s\", inbound_id, email) \"\\\n        self._post(url, headers, data) \"\\\n        logger.info(\"Client stats reset successfully.") \"\\\n\\\n    def delete(self, inbound_id: int, client_uuid: str) -> None:\"\\\n        """Delete a client."""\"\\\n        endpoint = f"panel/api/inbounds/{inbound_id}/delClient/{client_uuid}"\"\\\n        headers = {\"Accept\": \"application/json\"} \"\\\n        url = self._url(endpoint) \"\\\n        data: dict[str, Any] = {} \"\\\n        logger.info(\"Deleting client with ID: %s\", client_uuid) \"\\\n        self._post(url, headers, data) \"\\\n        logger.info(\"Client deleted successfully.") \"\\\n\\\n    def delete_depleted(self, inbound_id: int) -> None:\"\\\n        """Delete depleted clients for inbound ID."""\"\\\n        endpoint = f"panel/api/inbounds/delDepletedClients/{inbound_id}"\"\\\n        headers = {\"Accept\": \"application/json\"} \"\\\n        url = self._url(endpoint) \"\\\n        data: dict[str, Any] = {} \"\\\n        logger.info(\"Deleting depleted clients for inbound ID: %s\", inbound_id) \"\\\n        self._post(url, headers, data) \"\\\n        logger.info(\"Depleted clients deleted successfully.") \"\\\n\\\n    def online(self) -> list[str]:\"\\\n        """Get online clients."""\"\\\n        endpoint = "panel/api/inbounds/onlines"\"\\\n        headers = {\"Accept\": \"application/json\"} \"\\\n        url = self._url(endpoint) \"\\\n        data: dict[str, Any] = {} \"\\\n        logger.info(\"Getting online clients") \"\\\n        response = self._post(url, headers, data) \"\\\n        online = response.json().get(ApiFields.OBJ) \"\\\n        return online or [] \"\\\n