import json\\nfrom typing import Any, List\\\\\nfrom py3xui.api.api_base import ApiFields, BaseApi\\\\\nfrom py3xui.client.client import Client\\\\\nfrom py3xui.utils import Logger\\\\n\\\\nlogger = Logger(__name__)\\\\n\\\\nclass ClientApi(BaseApi):\\\\n    def get_by_email(self, email: str) -> Client | None:\\\\n        """This method retrieves information about a specific client based on their email.\\\n        It returns a Client object if found, otherwise returns None.\\\n        \\\n        Args:\\\n            email (str): The email of the client to retrieve.\\\n        \\\n        Returns:\\\n            Client | None: The client object if found, otherwise None.\\\n        \\\n        Examples::\\\\n            import py3xui\\\\n            \\\n            api = py3xui.Api.from_env()\\\\n            client = api.client.get_by_email("email")\\"""\\\\\\n        endpoint = f"panel/api/inbounds/getClientTraffics/{email}"\\\\\\n        headers = {"Accept": "application/json"} \\\\n        \\\\n        url = self._url(endpoint) \\\\n        logger.info("Getting client stats for email: %s", email) \\\\n        \\\\n        response = self._get(url, headers) \\\\n        \\\\n        client_json = response.json().get(ApiFields.OBJ) \\\\n        if not client_json: \\\\n            logger.warning("No client found for email: %s", email) \\\\n            return None \\\\n        return Client.model_validate(client_json) \\\\n    \\\\n    def get_ips(self, email: str) -> str | None: \\\\n        """This method retrieves the IP records associated with a specific client identified by their email.\\\n        \\\n        Args:\\\n            email (str): The email of the client to retrieve.\\\n        \\\n        Returns:\\\n            str | None: The client IPs if found, otherwise None.\\\n        \\\n        Examples::\\\\n            import py3xui\\\\n            \\\n            api = py3xui.Api.from_env()\\\\n            ips = api.client.get_ips("email") \\\"""\\\\\\n        endpoint = f"panel/api/inbounds/clientIps/{email}"\\\\\\n        headers = {"Accept": "application/json"} \\\\n        \\\\n        url = self._url(endpoint) \\\\n        logger.info("Getting client IPs for email: %s", email) \\\\n        \\\\n        response = self._post(url, headers, {}) \\\\n        \\\\n        ips_json = response.json().get(ApiFields.OBJ) \\\\n        return ips_json if ips_json != ApiFields.NO_IP_RECORD else None \\\\n    \\\\n    # Add more methods as needed, following the same structure and guidelines provided.