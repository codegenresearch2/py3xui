from typing import Any, Callable\\\\\nimport requests\\\\\nfrom time import sleep\\\\\n\\\\\nfrom py3xui.utils import Logger\\\\\n\\\\\nlogger = Logger(__name__)\\\\\n\\\\\n# pylint: disable=too-few-public-methods\\\\\nclass ApiFields:\\\\\n    """Stores the fields returned by the XUI API for parsing."""\\\\\n    SUCCESS = "success"\\\\\n    MSG = "msg"\\\\\n    OBJ = "obj"\\\\\n    CLIENT_STATS = "clientStats"\\\\\n    NO_IP_RECORD = "No IP Record"\\\\\n\\\\\nclass BaseApi:\\\\\n    def __init__(self, host: str, username: str, password: str):\\\\\n        self._host = host.rstrip("/")\\\\\n        self._username = username\\\\\n        self._password = password\\\\\n        self._max_retries = 3\\\\\n        self._session = None\\\\\n\\\\\n    @property\\\\\n    def host(self) -> str:\\\\\n        return self._host\\\\\n\\\\\n    @property\\\\\n    def username(self) -> str:\\\\\n        return self._username\\\\\n\\\\\n    @property\\\\\n    def password(self) -> str:\\\\\n        return self._password\\\\\n\\\\\n    @property\\\\\n    def max_retries(self) -> int:\\\\\n        return self._max_retries\\\\\n\\\\\n    @max_retries.setter\\\\\n    def max_retries(self, value: int) -> None:\\\\\n        self._max_retries = value\\\\\n\\\\\n    @property\\\\\n    def session(self) -> str | None:\\\\\n        return self._session\\\\\n\\\\\n    @session.setter\\\\\n    def session(self, value: str | None) -> None:\\\\\n        self._session = value\\\\\n\\\\\n    def login(self) -> None:\\\\\n        endpoint = "login"\\\\\n        headers: dict[str, str] = {}\\\\\n        url = self._url(endpoint)\\\\\n        data = {"username": self.username, "password": self.password}\\\\\n        logger.info("Logging in with username: %s", self.username)\\\\\n        response = self._post(url, headers, data)\\\\\n        cookie = response.cookies.get("session")\\\\\n        if not cookie:\\\\\n            raise ValueError("No session cookie found, something wrong with the login...")\\\\\n        logger.info("Session cookie successfully retrieved for username: %s", self.username)\\\\\n        self.session = cookie\\\\\n\\\\\n    def _check_response(self, response: requests.Response) -> None:\\\\\n        response_json = response.json()\\\\\n        status = response_json.get(ApiFields.SUCCESS)\\\\\n        message = response_json.get(ApiFields.MSG)\\\\\n        if not status:\\\\\n            raise ValueError(f"Response status is not successful, message: {message}")\\\\\n\\\\\n    def _url(self, endpoint: str) -> str:\\\\\n        return f"{self._host}/{endpoint}"\\"