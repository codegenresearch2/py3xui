python\\nfrom time import sleep\\nfrom typing import Any, Callable\\\\\\nimport requests\\\\\\nfrom py3xui.utils import Logger\\\\\\nlogger = Logger(__name__)\\\\\n# pylint: disable=too-few-public-methods\\\\\\nclass ApiFields:\\\\\\n    """Stores the fields returned by the XUI API for parsing."""\\\\\\n    SUCCESS = "success"\\\\\\n    MSG = "msg"\\\\\\n    OBJ = "obj"\\\\\\n    CLIENT_STATS = "clientStats"\\\\\\n    NO_IP_RECORD = "No IP Record"\\\\\\nclass BaseApi:\\\\\\n    """This class provides a high-level interface to interact with the XUI API."""\\\\\\n    def __init__(self, host: str, username: str, password: str):\\\\\\n        """\\\\\\n        Initializes the BaseApi instance.\\\\\\n        \\n        Args:\\\\\\n            host (str): The XUI host URL.\\\\\\n            username (str): The XUI username.\\\\\\n            password (str): The XUI password.\\\\\\n        """\\\\\\n        self._host = host.rstrip("/")\\\\\\n        self._username = username\\\\\\n        self._password = password\\\\\\n        self._max_retries: int = 3\\\\\\n        self._session: str | None = None\\\\\\n    @property\\\\\\n    def host(self) -> str:\\\\\\n        """\\\\\\n        The XUI host URL.\\\\\\n        Returns:\\\\\\n            str: The host URL.\\\\\\n        """\\\\\\n        return self._host\\\\\\n    @property\\\\\\n    def username(self) -> str:\\\\\\n        """\\\\\\n        The XUI username.\\\\\\n        Returns:\\\\\\n            str: The username.\\\\\\n        """\\\\\\n        return self._username\\\\\\n    @property\\\\\\n    def password(self) -> str:\\\\\\n        """\\\\\\n        The XUI password.\\\\\\n        Returns:\\\\\\n            str: The password.\\\\\\n        """\\\\\\n        return self._password\\\\\\n    @property\\\\\\n    def max_retries(self) -> int:\\\\\\n        """\\\\\\n        The maximum number of retry attempts.\\\\\\n        Returns:\\\\\\n            int: The maximum retry count.\\\\\\n        """\\\\\\n        return self._max_retries\\\\\\n    @max_retries.setter\\\\\\n    def max_retries(self, value: int) -> None:\\\\\\n        """\\\\\\n        Sets the maximum number of retry attempts.\\\\\\n        \\n        Args:\\\\\\n            value (int): The new maximum retry count.\\\\\\n        """\\\\\\n        self._max_retries = value\\\\\\n    @property\\\\\\n    def session(self) -> str | None:\\\\\\n        """\\\\\\n        The session cookie for the API requests.\\\\\\n        Returns:\\\\\\n            str | None: The session cookie or None.\\\\\\n        """\\\\\\n        return self._session\\\\\\n    @session.setter\\\\\\n    def session(self, value: str | None) -> None:\\\\\\n        """\\\\\\n        Sets the session cookie for the API requests.\\\\\\n        \\n        Args:\\\\\\n            value (str | None): The session cookie or None.\\\\\\n        """\\\\\\n        self._session = value\\\\\\n    def login(self) -> None:\\\\\\n        """\\\\\\n        Logs into the XUI API and sets the session cookie.\\\\\\n        \\n        Raises:\\\\\\n            ValueError: If no session cookie is found.\\\\\\n        """\\\\\\n        endpoint = "login"\\\\\\n        headers: dict[str, str] = {} \\\\\\n        url = self._url(endpoint) \\\\\\n        data = {"username": self.username, "password": self.password} \\\\\\n        logger.info("Logging in with username: %s", self.username) \\\\\\n        response = self._post(url, headers, data) \\\\\\n        cookie: str | None = response.cookies.get("session") \\\\\\n        if not cookie:\\\\\\n            raise ValueError("No session cookie found, something wrong with the login...") \\\\\\n        logger.info("Session cookie successfully retrieved for username: %s", self.username) \\\\\\n        self.session = cookie\\\\\\n    def _check_response(self, response: requests.Response) -> None:\\\\\\n        """\\\\\\n        Checks the response from the API for success status.\\\\\\n        \\n        Args:\\\\\\n            response (requests.Response): The API response.\\\\\\n        Raises:\\\\\\n            ValueError: If the response status is not successful.\\\\\\n        """\\\\\\n        response_json = response.json()\\\\\\n        status = response_json.get(ApiFields.SUCCESS) \\\\\\n        message = response_json.get(ApiFields.MSG) \\\\\\n        if not status:\\\\\\n            raise ValueError(f"Response status is not successful, message: {message}") \\\\\\n    def _url(self, endpoint: str) -> str:\\\\\\n        """\\\\\\n        Constructs the full URL for the given endpoint.\\\\\\n        \\n        Args:\\\\\\n            endpoint (str): The API endpoint.\\\\\\n        Returns:\\\\\\n            str: The full URL.\\\\\\n        """\\\\\\n        return f"{self._host}/{endpoint}"\\\\\\n    def _request_with_retry(\\\\\n        self,\\\\\n        method: Callable[..., requests.Response],\\\\\n        url: str,\\\\\n        headers: dict[str, str],\\\\\n        **kwargs: Any,\\\\\n    ) -> requests.Response:\\\\\\n        """\\\\\\n        Sends a request with retry mechanism.\\\\\\n        \\n        Args:\\\\\\n            method (Callable[..., requests.Response]): The HTTP method to use.\\\\\\n            url (str): The URL to request.\\\\\\n            headers (dict[str, str]): The headers for the request.\\\\\\n            **kwargs: Additional keyword arguments for the request.\\\\\\n        Returns:\\\\\\n            requests.Response: The response from the request.\\\\\\n        Raises:\\\\\\n            requests.exceptions.ConnectionError: If the connection fails.\\\\\\n            requests.exceptions.Timeout: If the request times out.\\\\\\n            requests.exceptions.RequestException: For other request errors.\\\\\\n            requests.exceptions.RetryError: If all retries fail.\\\\\\n        """\\\\\\n        logger.debug("%s request to %s...", method.__name__.upper(), url) \\\\\\n        for retry in range(1, self.max_retries + 1):\\\\\\n            try:\\\\\\n                skip_check = kwargs.pop("skip_check", False) \\\\\\n                response = method(url, cookies={"session": self.session}, headers=headers, **kwargs) \\\\\\n                response.raise_for_status() \\\\\\n                if skip_check:\\\\\\n                    return response \\\\\\n                self._check_response(response) \\\\\\n                return response \\\\\\n            except (requests.exceptions.ConnectionError, requests.exceptions.Timeout) as e:\\\\\\n                if retry == self.max_retries:\\\\\\n                    raise e \\\\\\n                logger.warning(\\\\\n                    "Request to %s failed: %s, retry %s of %s", url, e, retry, self.max_retries \\\\\\n                ) \\\\\\n                sleep(1 * (retry + 1)) \\\\\\n            except requests.exceptions.RequestException as e:\\\\\\n                raise e \\\\\\n        raise requests.exceptions.RetryError(\\\\\n            f"Max retries exceeded with no successful response to {url}" \\\\\\n        ) \\\\\\n    def _post(self, url: str, headers: dict[str, str], data: dict[str, Any], **kwargs) -> requests.Response:\\\\\\n        """\\\\\\n        Sends a POST request with retry mechanism.\\\\\\n        \\n        Args:\\\\\\n            url (str): The URL to request.\\\\\\n            headers (dict[str, str]): The headers for the request.\\\\\\n            data (dict[str, Any]): The data to send in the request.\\\\\\n            **kwargs: Additional keyword arguments for the request.\\\\\\n        Returns:\\\\\\n            requests.Response: The response from the request.\\\\\\n        """\\\\\\n        return self._request_with_retry(requests.post, url, headers, json=data, **kwargs) \\\\\\n    def _get(self, url: str, headers: dict[str, str], **kwargs) -> requests.Response:\\\\\\n        """\\\\\\n        Sends a GET request with retry mechanism.\\\\\\n        \\n        Args:\\\\\\n            url (str): The URL to request.\\\\\\n            headers (dict[str, str]): The headers for the request.\\\\\\n            **kwargs: Additional keyword arguments for the request.\\\\\\n        Returns:\\\\\\n            requests.Response: The response from the request.\\\\\\n        """\\\\\\n        return self._request_with_retry(requests.get, url, headers, **kwargs) \\\\\\n